{"version":3,"file":"csv-mapper.umd.min.js","sources":["../src/csv-mapper.js"],"sourcesContent":["/*\r\n * CSV Mapper – ES module source (no deps)\r\n * --------------------------------------\r\n * - Auto-detects separator, enclosure (quote), and escape char (supports doubled quotes or custom escape).\r\n * - Also accepts explicit config: separator, enclosure, escape. Pass empty string/undefined to auto-detect.\r\n * - Remapped CSV output preserves detected dialect unless overridden via outputSeparator/outputEnclosure/outputEscape.\r\n *\r\n * Example:\r\n *   import CsvMapper from './src/csv-mapper.js';\r\n *   const mapper = new CsvMapper('#csv', {\r\n *     separator: '',          // auto (default)\r\n *     enclosure: '',          // auto (default)\r\n *     escape: '',             // auto (default)\r\n *     outputSeparator: null,  // null => use detected input separator\r\n *     outputEnclosure: null,  // null => use detected input enclosure\r\n *     outputEscape: null,     // null => use detected input escape (or doubling)\r\n *     columns: ['id','name','sku','qty'],\r\n *   });\r\n */\r\n\r\nexport default class CsvMapper extends EventTarget {\r\n  /**\r\n   * @param {string|HTMLInputElement} fileInput selector or element for <input type=file>\r\n   * @param {object} options\r\n   */\r\n  constructor(fileInput, options={}){\r\n    super();\r\n    this.input = typeof fileInput === 'string' ? document.querySelector(fileInput) : fileInput;\r\n    if (!(this.input instanceof HTMLInputElement) || this.input.type !== 'file') {\r\n      throw new Error('CsvMapper: first argument must be a file input or selector.');\r\n    }\r\n\r\n    this.opts = Object.assign({\r\n      // Parsing/dialect\r\n      separator: '',     // auto when falsy/empty string\r\n      enclosure: '',     // auto when falsy/empty string\r\n      escape: '',        // auto when falsy/empty string; fallback to doubling\r\n      guessMaxLines: 25, // How many lines to use for auto dialect parsing\r\n      // Output dialect for remap (null => inherit detected input; fallback comma+\")\r\n      outputSeparator: null,\r\n      outputEnclosure: null,\r\n      outputEscape: null,\r\n\r\n      // Library behavior\r\n      headers: true,\r\n      remap: true,\r\n      showUserControls: true,\r\n      mappingInput: null,           // HTMLElement | false\r\n      controlsContainer: null,      // selector | element | null\r\n      columns: [],                  // canonical column spec\r\n      autoThreshold: 0.8,\r\n      allowUnmappedTargets: true,\r\n      beforeParse: null,\r\n      beforeMap: null,\r\n      afterMap: null,\r\n    }, options || {});\r\n\r\n    this.columns = (this.opts.columns || []).map(c => typeof c === 'string' ? { name:c } : Object.assign({}, c));\r\n    this.columns.forEach(c => { if (!c.title) c.title = c.name; });\r\n\r\n    this.controlsEl = this._resolveNode(this.opts.controlsContainer) || this._autoinsertContainer();\r\n    this.mapping = {};   // sourceHeader -> targetName\r\n    this.headers = [];\r\n    this.rows = [];\r\n    this.dialect = { separator: ',', enclosure: '\"', escape: null };\r\n\r\n    this._onFileChange = this._onFileChange.bind(this);\r\n    this.input.addEventListener('change', this._onFileChange);\r\n\r\n    CsvMapper._ensureStyles();\r\n  }\r\n\r\n  destroy(){\r\n    this.input.removeEventListener('change', this._onFileChange);\r\n    if (this.controlsEl && this.controlsEl.dataset.csvMapperAutocreated === '1') this.controlsEl.remove();\r\n  }\r\n\r\n  // ===== Public API =====\r\n  getMapping(){ return Object.assign({}, this.mapping); }\r\n  setMapping(map){ this.mapping = Object.assign({}, map||{}); if (this.opts.showUserControls) this._renderControls(); }\r\n  getHeaders(){ return [...this.headers]; }\r\n  getRawRows(){ return this.rows.map(r=>Object.assign({}, r)); }\r\n  getDialect(){ return Object.assign({}, this.dialect); }\r\n\r\n  async _onFileChange(){\r\n    const file = this.input.files && this.input.files[0];\r\n    if (!file) return;\r\n    let text = await file.text();\r\n\r\n    const bpEvent = new CustomEvent('beforeParse', { detail: { text } });\r\n    this.dispatchEvent(bpEvent);\r\n    if (typeof this.opts.beforeParse === 'function') {\r\n      text = this.opts.beforeParse(text) ?? text;\r\n    }\r\n\r\n    const parsed = CsvMapper.parseCSV(text, {\r\n      headers: this.opts.headers,\r\n      separator: this.opts.separator,\r\n      enclosure: this.opts.enclosure,\r\n      escape: this.opts.escape,\r\n      guessMaxLines: this.opts.guessMaxLines,\r\n    });\r\n    this.headers = parsed.headers;\r\n    this.rows = parsed.rows;\r\n    this.dialect = parsed.dialect;\r\n\r\n    this.mapping = Object.fromEntries(this.headers.map(h=>[h,'']));\r\n    this._autoMap();\r\n\r\n    if (this.opts.showUserControls) this._renderControls();\r\n\r\n    const bmEvent = new CustomEvent('beforeMap', { detail: { rows: this.getRawRows() } });\r\n    this.dispatchEvent(bmEvent);\r\n    if (typeof this.opts.beforeMap === 'function') {\r\n      const maybe = this.opts.beforeMap(this.rows);\r\n      if (Array.isArray(maybe)) this.rows = maybe;\r\n    }\r\n\r\n    const { mappedRows, csv } = this._produceOutput();\r\n\r\n    const amEvent = new CustomEvent('afterMap', { detail: { rows: mappedRows, csv } });\r\n    this.dispatchEvent(amEvent);\r\n    if (typeof this.opts.afterMap === 'function') {\r\n      this.opts.afterMap(mappedRows, csv);\r\n    }\r\n\r\n    const mappingInput = this._resolveNode(this.opts.mappingInput);\r\n    if (mappingInput instanceof HTMLInputElement) {\r\n      mappingInput.value = JSON.stringify(this.mapping);\r\n    }\r\n  }\r\n\r\n  _produceOutput(){\r\n    const targetToSource = {};\r\n    for (const [src, tgt] of Object.entries(this.mapping)) {\r\n      if (!tgt) continue;\r\n      const spec = this.columns.find(c=>c.name===tgt);\r\n      if (!spec) continue;\r\n      if (targetToSource[tgt] && spec.allowDuplicates !== true) continue;\r\n      (targetToSource[tgt] ||= []).push(src);\r\n    }\r\n\r\n    const mappedRows = this.rows.map((row) => {\r\n      const out = {};\r\n      for (const spec of this.columns) {\r\n        const srcHeaders = targetToSource[spec.name] || [];\r\n        let raw = '';\r\n        for (const h of srcHeaders) {\r\n          const v = row[h];\r\n          if (v != null && String(v) !== '') { raw = v; break; }\r\n        }\r\n        let val = raw;\r\n        if (spec.transform) { try { val = spec.transform(val, row); } catch(e){ console.warn('CsvMapper transform error for', spec.name, e); } }\r\n        if (spec.validate) {\r\n          const ok = CsvMapper._validate(val, spec.validate);\r\n          if (!ok) {\r\n            const msg = spec.validationMessage || `Validation failed for ${spec.title||spec.name}`;\r\n            (out.__errors__ ||= []).push({ field: spec.name, message: msg, value: val });\r\n          }\r\n        }\r\n        out[spec.name] = val ?? '';\r\n      }\r\n      return out;\r\n    });\r\n\r\n    let csv = null;\r\n    if (this.opts.remap) {\r\n      const outSep = this.opts.outputSeparator ?? this.dialect.separator ?? ',';\r\n      const outQuote = this.opts.outputEnclosure ?? this.dialect.enclosure ?? '\"';\r\n      const outEsc = this.opts.outputEscape ?? this.dialect.escape ?? null;\r\n      const headerRow = this.columns.map(c=>c.title||c.name);\r\n      const lines = [CsvMapper.toCsvRow(headerRow, outSep, outQuote, outEsc)];\r\n      for (const r of mappedRows) {\r\n        const arr = this.columns.map(c=> r[c.name]);\r\n        lines.push(CsvMapper.toCsvRow(arr, outSep, outQuote, outEsc));\r\n      }\r\n      csv = lines.join('\\n');\r\n    }\r\n    return { mappedRows, csv };\r\n  }\r\n\r\n  // ===== UI =====\r\n  _renderControls(){\r\n    const el = this.controlsEl; if (!el) return;\r\n    if (!this.headers.length) { el.innerHTML = this._banner('No CSV loaded. Choose a file to begin.'); return; }\r\n\r\n    const selectOptions = (currentTargetName)=>{\r\n      const taken = new Map();\r\n      Object.values(this.mapping).forEach(n => { if (!n) return; taken.set(n, (taken.get(n)||0)+1); });\r\n      return ['<option value=\"\">— Ignore —</option>']\r\n        .concat(this.columns.map(spec => {\r\n          const count = taken.get(spec.name)||0;\r\n          const dupAllowed = spec.allowDuplicates === true;\r\n          const disabled = !dupAllowed && spec.name !== currentTargetName && count > 0 ? 'disabled' : '';\r\n          const sel = currentTargetName === spec.name ? 'selected' : '';\r\n          const title = CsvMapper.escape(spec.title || spec.name);\r\n          return `<option value=\"${CsvMapper.escape(spec.name)}\" ${sel} ${disabled}>${title}${spec.allowDuplicates?' (multi)':''}</option>`;\r\n        })).join('');\r\n    };\r\n\r\n    const bodyRows = this.headers.map(h => {\r\n      const current = this.mapping[h] || '';\r\n      return `<tr>\r\n        <td><strong>${CsvMapper.escape(h)}</strong></td>\r\n        <td><select data-src=\"${CsvMapper.escape(h)}\">${selectOptions(current)}</select></td>\r\n      </tr>`;\r\n    }).join('');\r\n\r\n    el.innerHTML = `\r\n      <div class=\"csvm-card\">\r\n        <div class=\"csvm-card-h\">Map your columns <span class=\"csvm-tag\">${this.rows.length} rows • sep: ${CsvMapper.escape(this.dialect.separator || ',')}</span></div>\r\n        <div class=\"csvm-card-b\">\r\n          <table class=\"csvm-table\">\r\n            <thead><tr><th>Your CSV header</th><th>Map to</th></tr></thead>\r\n            <tbody>${bodyRows}</tbody>\r\n          </table>\r\n        </div>\r\n      </div>`;\r\n\r\n    el.querySelectorAll('select[data-src]').forEach(sel => {\r\n      sel.addEventListener('change', () => {\r\n        const src = sel.getAttribute('data-src');\r\n        this.mapping[src] = sel.value;\r\n        this._renderControls();\r\n        \r\n        // Trigger afterMap event when mapping changes\r\n        const { mappedRows, csv } = this._produceOutput();\r\n        const amEvent = new CustomEvent('afterMap', { detail: { rows: mappedRows, csv } });\r\n        this.dispatchEvent(amEvent);\r\n        if (typeof this.opts.afterMap === 'function') {\r\n          this.opts.afterMap(mappedRows, csv);\r\n        }\r\n\r\n        // Update mapping input\r\n        const mappingInput = this._resolveNode(this.opts.mappingInput);\r\n        if (mappingInput instanceof HTMLInputElement) {\r\n          mappingInput.value = JSON.stringify(this.mapping);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  _banner(text){ return `<div class=\"csvm-note\">${CsvMapper.escape(text)}</div>`; }\r\n\r\n  // ===== Auto mapping =====\r\n  _autoMap(){\r\n    const used = new Map();\r\n    for (const src of this.headers) {\r\n      let best = ''; let score = 0;\r\n      for (const spec of this.columns) {\r\n        const count = used.get(spec.name)||0;\r\n        const canUse = spec.allowDuplicates === true || count === 0;\r\n        if (!canUse) continue;\r\n        const s = this._matchScore(src, spec);\r\n        if (s > score) { score = s; best = spec.name; }\r\n      }\r\n      if (score >= this.opts.autoThreshold) {\r\n        this.mapping[src] = best;\r\n        used.set(best, (used.get(best)||0)+1);\r\n      }\r\n    }\r\n  }\r\n\r\n  _matchScore(srcHeader, spec){\r\n    const norm = CsvMapper.normalize(srcHeader);\r\n    const title = CsvMapper.normalize(spec.title||'');\r\n    const name  = CsvMapper.normalize(spec.name||'');\r\n    let score = 0;\r\n    if (spec.match instanceof RegExp) {\r\n      if (spec.match.test(srcHeader) || spec.match.test(norm)) score = Math.max(score, 1.0);\r\n    } else if (typeof spec.match === 'function') {\r\n      try { if (spec.match(srcHeader) || spec.match(norm)) score = Math.max(score, 1.0); } catch(e){}\r\n    }\r\n    if (norm === name || norm === title) score = Math.max(score, 0.98);\r\n    if (norm.includes(name) || norm.includes(title)) score = Math.max(score, 0.9);\r\n    score = Math.max(score, CsvMapper.similarity(norm, name) * 0.85);\r\n    score = Math.max(score, CsvMapper.similarity(norm, title) * 0.85);\r\n    return score;\r\n  }\r\n\r\n  // ===== Helpers =====\r\n  _resolveNode(ref){ if (!ref) return null; if (typeof ref === 'string') return document.querySelector(ref); return ref; }\r\n  _autoinsertContainer(){ if (!this.opts.showUserControls) return null; const d=document.createElement('div'); d.dataset.csvMapperAutocreated='1'; this.input.insertAdjacentElement('afterend', d); return d; }\r\n\r\n  // ---------- CSV core ----------\r\n  static parseCSV(text, { headers=true, separator='', enclosure='', escape='', guessMaxLines=25 }={}){\r\n    const needSep = !separator;\r\n    const needQuote = !enclosure;\r\n    const needEsc = escape === '' || escape == null;\r\n    const dialect = CsvMapper.detectDialect(text, {\r\n      separator: needSep ? null : separator,\r\n      enclosure: needQuote ? null : enclosure,\r\n      escape: needEsc ? null : escape,\r\n      guessMaxLines\r\n    });\r\n    const sep = dialect.separator || ',';\r\n    const quote = dialect.enclosure || '\"';\r\n    const esc = dialect.escape || null;\r\n\r\n    const rows = CsvMapper._parseWithDialect(text, sep, quote, esc);\r\n\r\n    if (headers) {\r\n      const head = rows.shift() || [];\r\n      const objs = rows.map(arr => Object.fromEntries(head.map((h,idx)=>[h, arr[idx] ?? ''])));\r\n      return { headers: head, rows: objs, dialect };\r\n    }\r\n    const maxLen = rows.reduce((m,a)=>Math.max(m,a.length),0);\r\n    const head = Array.from({length:maxLen}, (_,i)=>`Column ${i+1}`);\r\n    const objs = rows.map(arr => Object.fromEntries(head.map((h,idx)=>[h, arr[idx] ?? ''])));\r\n    return { headers: head, rows: objs, dialect };\r\n  }\r\n\r\n  static _parseWithDialect(text, sep, quote, esc){\r\n    const rows = [];\r\n    let i=0, f='', r=[], inQuotes=false;\r\n    while (i < text.length) {\r\n      const c = text[i];\r\n      if (inQuotes) {\r\n        if (esc && c === esc) {\r\n          const nxt = text[i+1];\r\n          if (nxt === quote) { f += quote; i += 2; continue; }\r\n          f += c; i++; continue;\r\n        }\r\n        if (c === quote) { inQuotes = false; i++; continue; }\r\n        f += c; i++; continue;\r\n      }\r\n      if (c === quote) { inQuotes = true; i++; continue; }\r\n      if (c === sep) { r.push(f); f=''; i++; continue; }\r\n      if (c === '\\n') { r.push(f); rows.push(r); r=[]; f=''; i++; continue; }\r\n      if (c === '\\r') { if (text[i+1] === '\\n') { i++; } r.push(f); rows.push(r); r=[]; f=''; i++; continue; }\r\n      if (!esc && c === quote && text[i+1] === quote) { f += quote; i += 2; continue; }\r\n      f += c; i++;\r\n    }\r\n    r.push(f); rows.push(r);\r\n    if (rows.length && rows[rows.length-1].length===1 && rows[rows.length-1][0]==='') rows.pop();\r\n    return rows;\r\n  }\r\n\r\n  static detectDialect(text, { separator=null, enclosure=null, escape=null, guessMaxLines=25 }={}){\r\n    const seps = separator ? [separator] : [',',';','\\t','|',':'];\r\n    const quotes = enclosure ? [enclosure] : ['\"', \"'\"];\r\n    const escapes = escape != null ? [escape] : [null, '\\\\'];\r\n\r\n    const lines = text.split(/\\r\\n|\\n|\\r/).filter(l=>l.length>0).slice(0, guessMaxLines);\r\n    if (lines.length === 0) return { separator: ',', enclosure: '\"', escape: null };\r\n\r\n    let best = { score: -Infinity, sep: ',', quote: '\"', esc: null };\r\n\r\n    for (const s of seps) {\r\n      const sep = s === '\\t' ? '\\t' : s;\r\n      for (const q of quotes) {\r\n        for (const e of escapes) {\r\n          try {\r\n            const sampleRows = CsvMapper._parseWithDialect(lines.join('\\n'), sep, q, e);\r\n            const counts = sampleRows.map(r=>r.length);\r\n            const mode = CsvMapper._mode(counts);\r\n            const consistent = counts.filter(c=>c===mode).length;\r\n            const penalty = mode <= 1 ? 50 : 0;\r\n            const sepHits = (lines[0].match(new RegExp(CsvMapper._escRe(sep), 'g'))||[]).length;\r\n            const score = consistent*100 + mode*5 + sepHits - penalty;\r\n            if (score > best.score) best = { score, sep, quote:q, esc:e };\r\n          } catch(err){ /* ignore */ }\r\n        }\r\n      }\r\n    }\r\n    return { separator: best.sep, enclosure: best.quote, escape: best.esc };\r\n  }\r\n\r\n  static _mode(arr){ const m=new Map(); let best=null,bestC=-1; for(const v of arr){const c=(m.get(v)||0)+1; m.set(v,c); if(c>bestC){best=v;bestC=c;}} return best; }\r\n  static _escRe(s){ return s.replace(/[.*+?^${}()|[\\]\\\\]/g, r=>`\\\\${r}`); }\r\n\r\n  static toCsvRow(arr, sep=',', quote='\"', esc=null){\r\n    return arr.map(v=>{\r\n      let s = String(v ?? '');\r\n      const needsQuote = s.includes(sep) || s.includes('\\n') || s.includes('\\r') || s.includes(quote);\r\n      if (esc) s = s.split(quote).join(esc + quote); else s = s.split(quote).join(quote + quote);\r\n      return needsQuote ? quote + s + quote : s;\r\n    }).join(sep);\r\n  }\r\n\r\n  static normalize(s){ return String(s||'').toLowerCase().replace(/[_\\-]/g,' ').replace(/\\s+/g,' ').trim(); }\r\n  static similarity(a,b){\r\n    a = CsvMapper.normalize(a); b = CsvMapper.normalize(b);\r\n    if (!a || !b) return 0; if (a===b) return 1;\r\n    const grams = str => { const m=new Map(); for(let i=0;i<str.length-1;i++){const g=str.slice(i,i+2); m.set(g,(m.get(g)||0)+1);} return m; };\r\n    const A=grams(a), B=grams(b);\r\n    let inter=0, total=0; for (const [g,c] of A){ if (B.has(g)) inter+=Math.min(c,B.get(g)); total+=c; } for (const [,c] of B) total+=c; return (2*inter)/(total||1);\r\n  }\r\n\r\n  static _validate(v, validator){\r\n    if (validator instanceof RegExp) return validator.test(String(v));\r\n    if (typeof validator === 'function') return !!validator(v);\r\n    if (validator && typeof validator === 'object'){\r\n      const t = validator.type;\r\n      if (t === 'number') {\r\n        const num = Number(String(v).replace(',','.'));\r\n        if (Number.isNaN(num)) return false;\r\n        if (validator.min != null && num < validator.min) return false;\r\n        if (validator.max != null && num > validator.max) return false;\r\n        return true;\r\n      }\r\n      if (t === 'boolean') {\r\n        const s = String(v).trim().toLowerCase();\r\n        return ['1','0','true','false','yes','no','y','n',''].includes(s);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  static _ensureStyles(){\r\n    if (document.getElementById('csvm-style')) return;\r\n    const css = `\r\n      .csvm-card{background:#0d1533; color:#e7ecff; border:1px solid rgba(255,255,255,.12); border-radius:12px; overflow:hidden; box-shadow:0 10px 30px rgba(0,0,0,.25)}\r\n      .csvm-card-h{padding:10px 12px; border-bottom:1px solid rgba(255,255,255,.12); font-weight:600; display:flex; align-items:center; gap:10px}\r\n      .csvm-tag{font:12px/1.2 system-ui; background:rgba(124,156,255,.18); border:1px solid rgba(124,156,255,.35); padding:2px 8px; border-radius:999px}\r\n      .csvm-card-b{padding:10px 12px}\r\n      .csvm-table{border-collapse:collapse; width:100%; font: 13px/1.4 system-ui}\r\n      .csvm-table th,.csvm-table td{border-bottom:1px solid rgba(255,255,255,.12); padding:8px 10px; text-align:left}\r\n      .csvm-table th{color:#a8b4dc}\r\n      .csvm-note{margin-top:8px; color:#a8b4dc}\r\n      .csvm-card select{background:#0b1026; color:#e7ecff; border:1px solid rgba(255,255,255,.18); border-radius:8px; padding:6px 8px}\r\n    `;\r\n    const style = document.createElement('style'); style.id = 'csvm-style'; style.textContent = css; document.head.appendChild(style);\r\n  }\r\n\r\n  static escape(s){ return String(s == null ? '' : s).replace(/[&<>\"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;','\\'':'&#39;'}[c])); }\r\n}"],"names":["CsvMapper","EventTarget","constructor","fileInput","options","super","this","input","document","querySelector","HTMLInputElement","type","Error","opts","Object","assign","separator","enclosure","escape","guessMaxLines","outputSeparator","outputEnclosure","outputEscape","headers","remap","showUserControls","mappingInput","controlsContainer","columns","autoThreshold","allowUnmappedTargets","beforeParse","beforeMap","afterMap","map","c","name","forEach","title","controlsEl","_resolveNode","_autoinsertContainer","mapping","rows","dialect","_onFileChange","bind","addEventListener","_ensureStyles","destroy","removeEventListener","dataset","csvMapperAutocreated","remove","getMapping","setMapping","_renderControls","getHeaders","getRawRows","r","getDialect","file","files","text","bpEvent","CustomEvent","detail","dispatchEvent","parsed","parseCSV","fromEntries","h","_autoMap","bmEvent","maybe","Array","isArray","mappedRows","csv","_produceOutput","amEvent","value","JSON","stringify","targetToSource","src","tgt","entries","spec","find","allowDuplicates","push","row","out","srcHeaders","raw","v","String","val","transform","e","console","warn","validate","_validate","msg","validationMessage","__errors__","field","message","outSep","outQuote","outEsc","headerRow","lines","toCsvRow","arr","join","el","length","innerHTML","_banner","selectOptions","currentTargetName","taken","Map","values","n","set","get","concat","count","disabled","sel","bodyRows","current","querySelectorAll","getAttribute","used","best","score","s","_matchScore","srcHeader","norm","normalize","match","RegExp","test","Math","max","includes","similarity","ref","d","createElement","insertAdjacentElement","needSep","needQuote","needEsc","detectDialect","sep","quote","esc","_parseWithDialect","head","shift","objs","idx","maxLen","reduce","m","a","from","_","i","f","inQuotes","pop","seps","quotes","escapes","split","filter","l","slice","Infinity","q","counts","mode","_mode","consistent","penalty","sepHits","_escRe","err","bestC","replace","needsQuote","toLowerCase","trim","b","grams","str","g","A","B","inter","total","has","min","validator","t","num","Number","isNaN","getElementById","style","id","textContent","appendChild"],"mappings":"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"}